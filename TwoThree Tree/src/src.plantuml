@startuml

title __RedBlack Tree Class Diagram__\n

  package  {
    class Datas {
        - data : int
        ~ Datas()
        ~ Datas()
        + getData()
        + setData()
        + getNext()
        + setNext()
    }
  }
  

  package  {
    class Nodes {
        # children : Nodes[]
        # data : Datas[]
        # numData : int
        # numChildren : int
        ~ Nodes()
        ~ Nodes()
        ~ Nodes()
        ~ Nodes()
        + getChild()
        + check4Child()
        + check4Children()
        + check4AllData()
        + check4Data()
        + setChild()
        + getParent()
        + setParent()
        + getData()
        + setData1()
        + deleteData()
        + deleteChild()
        + getLengthDataArray()
        + getLengthChildrenArray()
    }
  }
  

  package  {
    abstract class Tree {
        # Root : Nodes
        # numComparaisons : int
        # numTreeNode : int
        # queue : myQueue
        {abstract} + addNode()
        {abstract} + lookFor()
        {abstract} + nodeTraversal()
        + getRoot()
    }
  }
  

'  package  {
'    class TwoThree {
'        {static} + leftChild : int
'        {static} + middleChild : int
'        {static} + rightChild : int
'        {static} + firstData : int
'        {static} + secondData : int
'        ~ TwoThree()
'        + addNode()
'        {static} - findNode()
'        + lookFor()
'        + nodeTraversal()
'        - promoteNode()
'        - splitAndPromoteNodes()
'        - show()
'        - walk()
'        {static} + main()
'    }
'  }

package {
class RedBlack{
 {static} + leftChild : int
 {static} + rightChild : int
 {static} + dataIndex : int
 {static} + colourIndex : int
 {static} + redColour : int
 {static} + blackColour : int
 ~ RedBlack()
 + addNode()
 + lookFor()
 + nodeTraversal()
 - check4Colour()
 - restructure()
}
}
  

  package  {
    class myQueue {
        {static} - head : Datas
        {static} - tail : Datas
        ~ myQueue()
        + enqueue()
        + dequeue()
        + isEmpty()
        + emptyQueue()
    }
  }
  

  Datas o-- Datas : \npoints to another data >
  Nodes o-- Nodes : parent
  Datas -o Nodes :  has an array of data  >
  Tree o-- Nodes :  < starts with a Root
  Tree o- myQueue : queue
  RedBlack -up|> Tree
  myQueue o-- Datas : data <


right footer

Design Designed by Deano
PlantUML diagram generated by SketchIt!
endfooter

@enduml
